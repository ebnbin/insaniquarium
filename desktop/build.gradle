import Dependency

plugins {
  id "application"
}
apply plugin: 'org.jetbrains.kotlin.jvm'

java.toolchain.languageVersion.set(JavaLanguageVersion.of(Version.JAVA))

sourceSets.main.resources.srcDirs += [ rootProject.file('assets').path ]
mainClassName = 'dev.ebnbin.insaniquarium.lwjgl3.Lwjgl3Launcher'
application.setMainClass(mainClassName)

dependencies {
  implementation Dependency.GDX_BACKEND_LWJGL3
  implementation Dependency.GDX_FREETYPE_PLATFORM_NATIVES_DESKTOP
  implementation Dependency.GDX_PLATFORM_NATIVES_DESKTOP
  implementation project(':core')
}

def os = System.properties['os.name'].toLowerCase()

run {
  workingDir = rootProject.file('assets').path
  setIgnoreExitValue(true)

  if (os.contains('mac')) jvmArgs += "-XstartOnFirstThread"
}

jar {
// using 'lib' instead of the default 'libs' appears to be needed by jpackageimage.
  destinationDirectory = file("${project.layout.buildDirectory.asFile.get().absolutePath}/lib")
// the duplicatesStrategy matters starting in Gradle 7.0; this setting works.
  duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
  dependsOn configurations.runtimeClasspath
  from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
// these "exclude" lines remove some unnecessary duplicate files in the output JAR.
  exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
  dependencies {
    exclude('META-INF/INDEX.LIST', 'META-INF/maven/**')
  }
// setting the manifest makes the JAR runnable.
  manifest {
    attributes 'Main-Class': project.mainClassName
  }
// this last step may help on some OSes that need extra instruction to make runnable JARs.
  doLast {
    file(archiveFile).setExecutable(true, false)
  }
}

// Equivalent to the jar task; here for compatibility with gdx-setup.
tasks.register('dist') {
  dependsOn 'jar'
}
