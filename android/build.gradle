import Dependency

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

java.toolchain.languageVersion.set(JavaLanguageVersion.of(Version.JAVA))

android {
  namespace "dev.ebnbin.insaniquarium"
  compileSdk 34
  sourceSets {
    main {
      assets.setSrcDirs(['../assets'])
    }
  }
  defaultConfig {
    minSdkVersion 19
    targetSdkVersion 34
    versionCode Version.VERSION_CODE
    versionName Version.VERSION
  }
}

repositories {
  // needed for AAPT2, may be needed for other tools
  google()
}

configurations { natives }

dependencies {
  implementation Dependency.GDX_BACKEND_ANDROID
  implementation project(':core')

  natives Dependency.GDX_FREETYPE_PLATFORM_NATIVES_ARM64_V8A
  natives Dependency.GDX_FREETYPE_PLATFORM_NATIVES_ARMEABI_V7A
  natives Dependency.GDX_FREETYPE_PLATFORM_NATIVES_X86
  natives Dependency.GDX_FREETYPE_PLATFORM_NATIVES_X86_64
  natives Dependency.GDX_PLATFORM_NATIVES_ARM64_V8A
  natives Dependency.GDX_PLATFORM_NATIVES_ARMEABI_V7A
  natives Dependency.GDX_PLATFORM_NATIVES_X86
  natives Dependency.GDX_PLATFORM_NATIVES_X86_64

}

// Called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper jniLibs/ folders
// so they get packed with the APK.
tasks.register('copyAndroidNatives') {
  doFirst {
    file("src/main/jniLibs/armeabi-v7a/").mkdirs()
    file("src/main/jniLibs/arm64-v8a/").mkdirs()
    file("src/main/jniLibs/x86_64/").mkdirs()
    file("src/main/jniLibs/x86/").mkdirs()

    configurations.natives.copy().files.each { jar ->
      def outputDir = null
      if(jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("src/main/jniLibs/armeabi-v7a")
      if(jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("src/main/jniLibs/arm64-v8a")
      if(jar.name.endsWith("natives-x86_64.jar")) outputDir = file("src/main/jniLibs/x86_64")
      if(jar.name.endsWith("natives-x86.jar")) outputDir = file("src/main/jniLibs/x86")
      if(outputDir != null) {
        copy {
          from zipTree(jar)
          into outputDir
          include "*.so"
        }
      }
    }
  }
}

tasks.matching { it.name.contains("merge") && it.name.contains("JniLibFolders") }.configureEach { packageTask ->
  packageTask.dependsOn 'copyAndroidNatives'
}
